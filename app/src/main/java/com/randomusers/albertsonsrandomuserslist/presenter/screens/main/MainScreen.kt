package com.randomusers.albertsonsrandomuserslist.presenter.screens.mainimport android.annotation.SuppressLintimport androidx.compose.foundation.layout.*import androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Modifierimport androidx.compose.ui.text.input.TextFieldValueimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport cafe.adriel.voyager.androidx.AndroidScreenimport cafe.adriel.voyager.hilt.getViewModelimport com.randomusers.albertsonsrandomuserslist.presenter.screens.main.component.HomeItemsimport com.randomusers.albertsonsrandomuserslist.ui.theme.WeatherAppThemeimport com.randomusers.albertsonsrandomuserslist.utils.Constantsclass MainScreen : AndroidScreen() {    @Composable    override fun Content() {        val viewModel: MainContract.ViewModel = getViewModel<MainViewModel>()        WeatherAppTheme {            HomeScreenContent(                uiState = viewModel.uiState.collectAsState(),                onEventDispatcher = viewModel::onEventDispatcher            )        }    }    @OptIn(ExperimentalMaterial3Api::class)    @Composable    fun HomeScreenContent(        uiState: State<MainContract.UIState>,        onEventDispatcher: (MainContract.Intent) -> Unit = {}    ) {        var userCount by remember { mutableStateOf(TextFieldValue("")) }  // Track the input in TextField        Surface(            modifier = Modifier                .fillMaxSize()                .padding(16.dp)        ) {            Column(                modifier = Modifier.fillMaxSize(),                verticalArrangement = Arrangement.Top            ) {                // TextField to enter the number of users                OutlinedTextField(                    value = userCount,                    onValueChange = { userCount = it },                    label = { Text("Number of users") },                    modifier = Modifier                        .width(300.dp)                        .padding(bottom = 16.dp)                )                // Row to display buttons side by side                Row(                    horizontalArrangement = Arrangement.spacedBy(16.dp), // Space between buttons                    modifier = Modifier                        .fillMaxWidth()                        .padding(bottom = 16.dp)                ) {                    // Fetch Button                    Button(                        onClick = {                            // Parse count from TextField input                            val count = userCount.text.toIntOrNull() ?: Constants.USERS_COUNT                            if (count > 0) {                                // Dispatch the intent with dynamic user count                                onEventDispatcher(MainContract.Intent.LoadUsers(count))                                Constants.USERS_COUNT = count  // Update constant with new value                            } else {                                onEventDispatcher(MainContract.Intent.LoadUsers(count))                                Constants.USERS_COUNT = 5  // Default to 5 if invalid input                            }                        },                        modifier = Modifier                            .width(150.dp) // Width for the button                    ) {                        Text("Fetch user(s)")                    }                    // Reset Button (TextButton)                    TextButton(                        onClick = {                            // Reset the TextField and Constants.USERS_COUNT                            userCount = TextFieldValue("")  // Clear the TextField                            onEventDispatcher(MainContract.Intent.LoadUsers(20))                            Constants.USERS_COUNT = 20  // Reset to default value                        },                        modifier = Modifier                            .width(100.dp) // Width for the reset button                    ) {                        Text("Reset")                    }                }                // LazyColumn to display the list of users                LazyColumn(                    modifier = Modifier.fillMaxSize()                ) {                    items(uiState.value.userList) { user ->                        HomeItems(                            fullName = user.fullName,                            gender = user.gender,                            address = user.country,                            email = user.email,                            picture = user.picture,                            onClick = {                                onEventDispatcher(MainContract.Intent.MoveToDetail(user))                            }                        )                    }                }            }        }    }    @SuppressLint("UnrememberedMutableState")    @Composable    @Preview(showBackground = true)    fun HomeScreenPreview() {        HomeScreenContent(uiState = mutableStateOf(MainContract.UIState()))    }}