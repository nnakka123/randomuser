package com.randomusers.albertsonsrandomuserslist.presenter.screens.mainimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextimport com.randomusers.albertsonsrandomuserslist.domain.usecase.UsersUseCaseimport javax.inject.Inject@HiltViewModelclass MainViewModel @Inject constructor(    private val useCase: UsersUseCase,    private val direction: MainDirection,) : MainContract.ViewModel, ViewModel() {    override val uiState = MutableStateFlow(MainContract.UIState())    override fun onEventDispatcher(intent: MainContract.Intent) {        when (intent) {            is MainContract.Intent.MoveToDetail -> {                viewModelScope.launch {                    direction.moveToDetail(intent.usersModel)                }            }            is MainContract.Intent.LoadUsers -> {                // Handle the LoadUsers intent                loadUsers(intent.count)            }        }    }    private fun loadUsers(count: Int) {        viewModelScope.launch {            withContext(Dispatchers.IO) {                // Fetch the users with the specified count                useCase.invoke(count).onEach { users ->                    uiState.update { state ->                        state.copy(userList = users)                    }                }.collect()            }        }    }    // Optionally, you can initialize users with a default count if needed    init {        viewModelScope.launch {            loadUsers(10) // default to load 10 users on init        }    }}